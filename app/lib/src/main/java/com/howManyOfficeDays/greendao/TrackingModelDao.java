package com.howManyOfficeDays.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRACKING_MODEL".
*/
public class TrackingModelDao extends AbstractDao<TrackingModel, Long> {

    public static final String TABLENAME = "TRACKING_MODEL";

    /**
     * Properties of entity TrackingModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OfficeDays = new Property(1, Integer.class, "officeDays", false, "OFFICE_DAYS");
        public final static Property WorkingDays = new Property(2, Integer.class, "workingDays", false, "WORKING_DAYS");
        public final static Property PercentageGoal = new Property(3, Integer.class, "percentageGoal", false, "PERCENTAGE_GOAL");
        public final static Property DaysLeft = new Property(4, Integer.class, "daysLeft", false, "DAYS_LEFT");
        public final static Property PercentageArchived = new Property(5, Long.class, "percentageArchived", false, "PERCENTAGE_ARCHIVED");
    }


    public TrackingModelDao(DaoConfig config) {
        super(config);
    }
    
    public TrackingModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRACKING_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OFFICE_DAYS\" INTEGER," + // 1: officeDays
                "\"WORKING_DAYS\" INTEGER," + // 2: workingDays
                "\"PERCENTAGE_GOAL\" INTEGER," + // 3: percentageGoal
                "\"DAYS_LEFT\" INTEGER," + // 4: daysLeft
                "\"PERCENTAGE_ARCHIVED\" INTEGER);"); // 5: percentageArchived
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRACKING_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TrackingModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer officeDays = entity.getOfficeDays();
        if (officeDays != null) {
            stmt.bindLong(2, officeDays);
        }
 
        Integer workingDays = entity.getWorkingDays();
        if (workingDays != null) {
            stmt.bindLong(3, workingDays);
        }
 
        Integer percentageGoal = entity.getPercentageGoal();
        if (percentageGoal != null) {
            stmt.bindLong(4, percentageGoal);
        }
 
        Integer daysLeft = entity.getDaysLeft();
        if (daysLeft != null) {
            stmt.bindLong(5, daysLeft);
        }
 
        Long percentageArchived = entity.getPercentageArchived();
        if (percentageArchived != null) {
            stmt.bindLong(6, percentageArchived);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TrackingModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer officeDays = entity.getOfficeDays();
        if (officeDays != null) {
            stmt.bindLong(2, officeDays);
        }
 
        Integer workingDays = entity.getWorkingDays();
        if (workingDays != null) {
            stmt.bindLong(3, workingDays);
        }
 
        Integer percentageGoal = entity.getPercentageGoal();
        if (percentageGoal != null) {
            stmt.bindLong(4, percentageGoal);
        }
 
        Integer daysLeft = entity.getDaysLeft();
        if (daysLeft != null) {
            stmt.bindLong(5, daysLeft);
        }
 
        Long percentageArchived = entity.getPercentageArchived();
        if (percentageArchived != null) {
            stmt.bindLong(6, percentageArchived);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TrackingModel readEntity(Cursor cursor, int offset) {
        TrackingModel entity = new TrackingModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // officeDays
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // workingDays
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // percentageGoal
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // daysLeft
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // percentageArchived
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TrackingModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOfficeDays(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setWorkingDays(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPercentageGoal(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDaysLeft(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPercentageArchived(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TrackingModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TrackingModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TrackingModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
